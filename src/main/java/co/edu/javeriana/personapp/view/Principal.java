/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package co.edu.javeriana.personapp.view;

import co.edu.javeriana.personapp.controller.PersonaBO;
import co.edu.javeriana.personapp.controller.TelefonoBO;
import co.edu.javeriana.personapp.model.dto.PersonaDTO;
import co.edu.javeriana.personapp.model.dto.TelefonoDTO;
import java.util.List;

/**
 *
 * @author esteb
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    
    private PersonaPanel panelPersona;
    private TelefonoPanel panelTelefono;
    private PersonaBO perBO;
    private TelefonoBO telBO;
    
    public Principal() {
        this.setTitle("Personapp");
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setVisible(true);
        this.iniciar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 9, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    private void iniciar() {
        //this.removeAll();
        this.panelPersona = new PersonaPanel(this);
        this.panelPersona.setVisible(true);
        this.panelPersona.refrescar();
        this.add(panelPersona);
        this.setLocationRelativeTo(null);
        this.pack();
    }
    
    protected void irTelefonoPersona() {
        this.remove(panelTelefono);
       
        this.panelPersona = new PersonaPanel(this);
        this.panelPersona.setVisible(true);
        this.panelPersona.refrescar();
        this.add(panelPersona);
        this.setLocationRelativeTo(null);
        this.pack();
    }
    
    protected void irPersonaTelefono() {
        this.remove(panelPersona);
        this.perBO = new PersonaBO();
        this.panelTelefono = new TelefonoPanel(this);
        this.panelTelefono.setVisible(true);
        this.panelTelefono.agregarDuenios(this.perBO.findAll());
        this.panelTelefono.refrescar();
        this.add(panelTelefono);
        this.setLocationRelativeTo(null);
        this.pack();
    }
    
    protected void salir() {
        System.exit(0);
    }

    Boolean crearPersona(PersonaDTO p1) {
        this.perBO = new PersonaBO();
        return this.perBO.crear(p1);
    }
    
    Boolean editarPersona(Long l, PersonaDTO p1) {
        this.perBO = new PersonaBO();
        PersonaDTO p = this.perBO.editar(l, p1);
        return p != null;
    }

    Boolean eliminarPersona(long l) {
        this.perBO = new PersonaBO();
        return this.perBO.eliminar(l);
    }

    PersonaDTO findByIdPersonas(long l) {
        this.perBO = new PersonaBO();
        return this.perBO.findById(l);
    }

    List<PersonaDTO> findAllPersonas() {
        this.perBO = new PersonaBO();
        return this.perBO.findAll();
    }

    Integer contarPersonas() {
        this.perBO = new PersonaBO();
        return this.perBO.contar();
    }
    
    Boolean crearTelefono(String numero, String operador, String celDuenio) {
        this.telBO = new TelefonoBO();
        this.perBO = new PersonaBO();
        PersonaDTO d = this.perBO.findById((long) Integer.parseInt(celDuenio));
        TelefonoDTO t1 = new TelefonoDTO(numero, operador, d);
        return this.telBO.crear(t1);
    }
    
    Boolean editarTelefono(String numero, String operador, String celDuenio) {
        this.telBO = new TelefonoBO();
        this.perBO = new PersonaBO();
        PersonaDTO d = this.perBO.findById((long) Integer.parseInt(celDuenio));
        TelefonoDTO t1 = new TelefonoDTO(numero, operador, d);
        TelefonoDTO t = this.telBO.editar(numero, t1);
        return t != null;
    }

    Boolean eliminarTelefono(String n) {
        this.telBO = new TelefonoBO();
        return this.telBO.eliminar(n);
    }

    TelefonoDTO findByIdTelefonos(String n) {
        this.telBO = new TelefonoBO();
        return this.telBO.findById(n);
    }
    
    List<TelefonoDTO> findByDuenioTelefonos(String c) {
        this.telBO = new TelefonoBO();
        return this.telBO.findByDuenio((long) Integer.parseInt(c));
    }

    List<TelefonoDTO> findAllTelefonos() {
        this.telBO = new TelefonoBO();
        return this.telBO.findAll();
    }

    Integer contarTelefonos() {
        this.telBO = new TelefonoBO();
        return this.telBO.contar();
    }   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
